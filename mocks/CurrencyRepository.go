// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CurrencyRepository is an autogenerated mock type for the CurrencyRepository type
type CurrencyRepository struct {
	mock.Mock
}

// CreateInBatches provides a mock function with given fields: value, batchSize
func (_m *CurrencyRepository) CreateInBatches(value interface{}, batchSize int) error {
	ret := _m.Called(value, batchSize)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, int) error); ok {
		r0 = rf(value, batchSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: out, conditions
func (_m *CurrencyRepository) Find(out interface{}, conditions ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, out)
	_ca = append(_ca, conditions...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(out, conditions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMinAndMaxDatesInHistory provides a mock function with given fields:
func (_m *CurrencyRepository) GetMinAndMaxDatesInHistory() (int64, int64) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

type mockConstructorTestingTNewCurrencyRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCurrencyRepository creates a new instance of CurrencyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCurrencyRepository(t mockConstructorTestingTNewCurrencyRepository) *CurrencyRepository {
	mock := &CurrencyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
